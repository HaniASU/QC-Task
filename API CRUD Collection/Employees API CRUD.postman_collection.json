{
	"info": {
		"_postman_id": "d15545fc-8297-4f85-b712-a718dbbad30f",
		"name": "Employees API CRUD",
		"description": "Postman collection for [https://dummy.restapiexample.com](https://dummy.restapiexample.com)  \nEndpoints covered:  \n\\- Get all employees  \n\\- Get employee by id  \n\\- Create employee  \n\\- Update employee  \n\\- Delete employee",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "33769925",
		"_collection_link": "https://hani21200.postman.co/workspace/Hani_21200-Workspace~6b97a006-762d-4d0d-8cb9-96e9832ae1ab/collection/33769925-d15545fc-8297-4f85-b712-a718dbbad30f?action=share&source=collection_link&creator=33769925"
	},
	"item": [
		{
			"name": "Get all employees",
			"item": [
				{
					"name": "Get all employees",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var template = `\r",
									"<style type=\"text/css\">\r",
									"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
									"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
									"    .tftable tr {background-color:#ffffff;}\r",
									"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
									"    .tftable tr:hover {background-color:#e0ffff;}\r",
									"</style>\r",
									"\r",
									"<table class=\"tftable\" border=\"1\">\r",
									"    <tr>\r",
									"        <th>ID</th>\r",
									"        <th>Name</th>\r",
									"        <th>Salary</th>\r",
									"        <th>Age</th>\r",
									"        <th>Profile Image</th>\r",
									"    </tr>\r",
									"    \r",
									"    {{#each response.data}}\r",
									"        <tr id=row_{{@key}}>\r",
									"            <td>{{id}}</td>\r",
									"            <td>{{employee_name}}</td>\r",
									"            <td>{{employee_salary}}</td>\r",
									"            <td>{{employee_age}}</td>\r",
									"            <td><img src=\"{{profile_image}}\" alt=\"Profile Image\" width=\"50\" height=\"50\"/></td>\r",
									"        </tr>\r",
									"    {{/each}}\r",
									"</table>\r",
									"`;\r",
									"\r",
									"function constructVisualizerPayload() {\r",
									"    return {response: pm.response.json()};\r",
									"}\r",
									"\r",
									"pm.visualizer.set(template, constructVisualizerPayload());\r",
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.all.keys('status', 'data', 'message');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Data is an array containing at least one employee object\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data).to.be.an('array').that.is.not.empty;\r",
									"    responseData.data.forEach(function(employee) {\r",
									"        pm.expect(employee).to.be.an('object');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the employee object schema\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.all.keys('status', 'data', 'message');\r",
									"    \r",
									"    pm.expect(responseData.data).to.be.an('array').that.is.not.empty;\r",
									"    \r",
									"    responseData.data.forEach(employee => {\r",
									"        pm.expect(employee).to.be.an('object');\r",
									"        pm.expect(employee).to.have.all.keys('id', 'employee_name', 'employee_salary', 'employee_age', 'profile_image');\r",
									"        \r",
									"        pm.expect(employee.id).to.be.a('number').that.is.at.least(0);\r",
									"        pm.expect(employee.employee_name).to.be.a('string').that.is.not.empty;\r",
									"        pm.expect(employee.employee_salary).to.be.a('number').that.is.at.least(0);\r",
									"        pm.expect(employee.employee_age).to.be.a('number').that.is.at.least(0);\r",
									"        pm.expect(employee.profile_image).to.be.a('string');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Employee salary and age must be non-negative integers\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data).to.be.an('array').that.is.not.empty;\r",
									"\r",
									"    responseData.data.forEach(function(employee) {\r",
									"        pm.expect(employee.employee_salary).to.be.a('number').and.to.be.at.least(0);\r",
									"        pm.expect(employee.employee_age).to.be.a('number').and.to.be.at.least(0);\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/employees"
					},
					"response": [
						{
							"name": "Valid",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": "{{baseUrl}}/employees"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": null,
							"header": [
								{
									"key": "Date",
									"value": "Sun, 10 Aug 2025 16:50:28 GMT"
								},
								{
									"key": "Server",
									"value": "nginx/1.25.5"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "636"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, private"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "60"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "58"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								},
								{
									"key": "X-Server-Cache",
									"value": "false"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"success\",\n    \"data\": [\n        {\n            \"id\": 1,\n            \"employee_name\": \"Tiger Nixon\",\n            \"employee_salary\": 320800,\n            \"employee_age\": 61,\n            \"profile_image\": \"\"\n        },\n        {\n            \"id\": 2,\n            \"employee_name\": \"Garrett Winters\",\n            \"employee_salary\": 170750,\n            \"employee_age\": 63,\n            \"profile_image\": \"\"\n        },\n        {\n            \"id\": 3,\n            \"employee_name\": \"Ashton Cox\",\n            \"employee_salary\": 86000,\n            \"employee_age\": 66,\n            \"profile_image\": \"\"\n        },\n        {\n            \"id\": 4,\n            \"employee_name\": \"Cedric Kelly\",\n            \"employee_salary\": 433060,\n            \"employee_age\": 22,\n            \"profile_image\": \"\"\n        },\n        {\n            \"id\": 5,\n            \"employee_name\": \"Airi Satou\",\n            \"employee_salary\": 162700,\n            \"employee_age\": 33,\n            \"profile_image\": \"\"\n        },\n        {\n            \"id\": 6,\n            \"employee_name\": \"Brielle Williamson\",\n            \"employee_salary\": 372000,\n            \"employee_age\": 61,\n            \"profile_image\": \"\"\n        },\n        {\n            \"id\": 7,\n            \"employee_name\": \"Herrod Chandler\",\n            \"employee_salary\": 137500,\n            \"employee_age\": 59,\n            \"profile_image\": \"\"\n        },\n        {\n            \"id\": 8,\n            \"employee_name\": \"Rhona Davidson\",\n            \"employee_salary\": 327900,\n            \"employee_age\": 55,\n            \"profile_image\": \"\"\n        },\n        {\n            \"id\": 9,\n            \"employee_name\": \"Colleen Hurst\",\n            \"employee_salary\": 205500,\n            \"employee_age\": 39,\n            \"profile_image\": \"\"\n        },\n        {\n            \"id\": 10,\n            \"employee_name\": \"Sonya Frost\",\n            \"employee_salary\": 103600,\n            \"employee_age\": 23,\n            \"profile_image\": \"\"\n        },\n        {\n            \"id\": 11,\n            \"employee_name\": \"Jena Gaines\",\n            \"employee_salary\": 90560,\n            \"employee_age\": 30,\n            \"profile_image\": \"\"\n        },\n        {\n            \"id\": 12,\n            \"employee_name\": \"Quinn Flynn\",\n            \"employee_salary\": 342000,\n            \"employee_age\": 22,\n            \"profile_image\": \"\"\n        },\n        {\n            \"id\": 13,\n            \"employee_name\": \"Charde Marshall\",\n            \"employee_salary\": 470600,\n            \"employee_age\": 36,\n            \"profile_image\": \"\"\n        },\n        {\n            \"id\": 14,\n            \"employee_name\": \"Haley Kennedy\",\n            \"employee_salary\": 313500,\n            \"employee_age\": 43,\n            \"profile_image\": \"\"\n        },\n        {\n            \"id\": 15,\n            \"employee_name\": \"Tatyana Fitzpatrick\",\n            \"employee_salary\": 385750,\n            \"employee_age\": 19,\n            \"profile_image\": \"\"\n        },\n        {\n            \"id\": 16,\n            \"employee_name\": \"Michael Silva\",\n            \"employee_salary\": 198500,\n            \"employee_age\": 66,\n            \"profile_image\": \"\"\n        },\n        {\n            \"id\": 17,\n            \"employee_name\": \"Paul Byrd\",\n            \"employee_salary\": 725000,\n            \"employee_age\": 64,\n            \"profile_image\": \"\"\n        },\n        {\n            \"id\": 18,\n            \"employee_name\": \"Gloria Little\",\n            \"employee_salary\": 237500,\n            \"employee_age\": 59,\n            \"profile_image\": \"\"\n        },\n        {\n            \"id\": 19,\n            \"employee_name\": \"Bradley Greer\",\n            \"employee_salary\": 132000,\n            \"employee_age\": 41,\n            \"profile_image\": \"\"\n        },\n        {\n            \"id\": 20,\n            \"employee_name\": \"Dai Rios\",\n            \"employee_salary\": 217500,\n            \"employee_age\": 35,\n            \"profile_image\": \"\"\n        },\n        {\n            \"id\": 21,\n            \"employee_name\": \"Jenette Caldwell\",\n            \"employee_salary\": 345000,\n            \"employee_age\": 30,\n            \"profile_image\": \"\"\n        },\n        {\n            \"id\": 22,\n            \"employee_name\": \"Yuri Berry\",\n            \"employee_salary\": 675000,\n            \"employee_age\": 40,\n            \"profile_image\": \"\"\n        },\n        {\n            \"id\": 23,\n            \"employee_name\": \"Caesar Vance\",\n            \"employee_salary\": 106450,\n            \"employee_age\": 21,\n            \"profile_image\": \"\"\n        },\n        {\n            \"id\": 24,\n            \"employee_name\": \"Doris Wilder\",\n            \"employee_salary\": 85600,\n            \"employee_age\": 23,\n            \"profile_image\": \"\"\n        }\n    ],\n    \"message\": \"Successfully! All records has been fetched.\"\n}"
						}
					]
				}
			],
			"description": "Get all employee data"
		},
		{
			"name": "Get employee by id",
			"item": [
				{
					"name": "Get employee by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains required fields\", function () {\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.all.keys('status', 'data', 'message');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that only one record is returned in the data\", function () {\r",
									"    pm.expect(responseData.data).to.be.an('object'); // Ensure data is an object\r",
									"    pm.expect(responseData.data).to.have.property('id'); // Ensure id property exists\r",
									"    pm.expect(responseData.data).to.have.property('employee_name'); // Ensure employee_name property exists\r",
									"});\r",
									"\r",
									"// Get the id from response data\r",
									"const employeeIdFromData = responseData.data.id;\r",
									"\r",
									"// Get the ID that was sent\r",
									"const sentEmployeeId = pm.collectionVariables.get(\"sentEmployeeId\");\r",
									"\r",
									"console.log(\"Response ID:\", employeeIdFromData);\r",
									"console.log(\"Sent ID:\", sentEmployeeId);\r",
									"\r",
									"pm.test('Response id matches sent id', () => {\r",
									"    pm.expect(String(employeeIdFromData)).to.eql(String(sentEmployeeId));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const employeeId = pm.request.url.variables.get('employeeId');\r",
									"pm.collectionVariables.set(\"sentEmployeeId\", employeeId);\r",
									"console.log(\"Employee ID saved:\", employeeId);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/employee/:employeeId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"employee",
								":employeeId"
							],
							"variable": [
								{
									"key": "employeeId",
									"value": "4"
								}
							]
						}
					},
					"response": [
						{
							"name": "Two Many Request error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": "{{baseUrl}}/employee/24"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": null,
							"header": [
								{
									"key": "Date",
									"value": "Sun, 10 Aug 2025 17:23:44 GMT"
								},
								{
									"key": "Server",
									"value": "nginx/1.25.5"
								},
								{
									"key": "Content-Type",
									"value": "text/html; charset=UTF-8"
								},
								{
									"key": "Content-Length",
									"value": "595"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "60"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "55"
								},
								{
									"key": "retry-after",
									"value": "14"
								},
								{
									"key": "x-ratelimit-reset",
									"value": "1754846638"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, private"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <title>Too Many Requests</title>\n        <!-- Fonts -->\n        <link rel=\"dns-prefetch\" href=\"//fonts.gstatic.com\">\n        <link href=\"https://fonts.googleapis.com/css?family=Nunito\" rel=\"stylesheet\">\n        <!-- Styles -->\n        <style>\n            html, body {\n                background-color: #fff;\n                color: #636b6f;\n                font-family: 'Nunito', sans-serif;\n                font-weight: 100;\n                height: 100vh;\n                margin: 0;\n            }\n\n            .full-height {\n                height: 100vh;\n            }\n\n            .flex-center {\n                align-items: center;\n                display: flex;\n                justify-content: center;\n            }\n\n            .position-ref {\n                position: relative;\n            }\n\n            .code {\n                border-right: 2px solid;\n                font-size: 26px;\n                padding: 0 15px 0 15px;\n                text-align: center;\n            }\n\n            .message {\n                font-size: 18px;\n                text-align: center;\n            }\n        </style>\n    </head>\n    <body>\n        <div class=\"flex-center position-ref full-height\">\n            <div class=\"code\">\n                429            </div>\n            <div class=\"message\" style=\"padding: 10px;\">\n                Too Many Requests            </div>\n        </div>\n    </body>\n</html>"
						},
						{
							"name": "Get employee by id",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/employee/:employeeId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"employee",
										":employeeId"
									],
									"variable": [
										{
											"key": "employeeId",
											"value": "3"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": null,
							"header": [
								{
									"key": "Date",
									"value": "Sun, 10 Aug 2025 18:35:35 GMT"
								},
								{
									"key": "Server",
									"value": "nginx/1.25.5"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "151"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, private"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "60"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "58"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								},
								{
									"key": "X-Server-Cache",
									"value": "false"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"success\",\n    \"data\": {\n        \"id\": 3,\n        \"employee_name\": \"Ashton Cox\",\n        \"employee_salary\": 86000,\n        \"employee_age\": 66,\n        \"profile_image\": \"\"\n    },\n    \"message\": \"Successfully! Record has been fetched.\"\n}"
						}
					]
				}
			],
			"description": "Get a single employee data"
		},
		{
			"name": "Create employee",
			"item": [
				{
					"name": "Create employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status is success\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.status).to.equal(\"success\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{employeeName}}\",\r\n  \"salary\": \"{{employeeSalary}}\",\r\n  \"age\": \"{{employeeAge}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/create"
					},
					"response": [
						{
							"name": "Create employee",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{employeeName}}\",\r\n  \"salary\": \"{{employeeSalary}}\",\r\n  \"age\": \"{{employeeAge}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/create"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": null,
							"header": [
								{
									"key": "Date",
									"value": "Sun, 10 Aug 2025 18:04:47 GMT"
								},
								{
									"key": "Server",
									"value": "Apache"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, private"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "60"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "58"
								},
								{
									"key": "Upgrade",
									"value": "h2,h2c"
								},
								{
									"key": "Connection",
									"value": "Upgrade"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								},
								{
									"key": "Content-Length",
									"value": "135"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"success\",\n    \"data\": {\n        \"name\": \"Hani Mohamed\",\n        \"salary\": \"25000\",\n        \"age\": \"24\",\n        \"id\": 9366\n    },\n    \"message\": \"Successfully! Record has been added.\"\n}"
						}
					]
				}
			],
			"description": "Create new record in database"
		},
		{
			"name": "Update employee",
			"item": [
				{
					"name": "Update employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status is success\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.status).to.equal(\"success\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{employeeName}}\",\r\n  \"salary\": \"{{employeeSalary}}\",\r\n  \"age\": \"{{employeeAge}}\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/update/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"update",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "6"
								}
							]
						}
					},
					"response": [
						{
							"name": "Update employee",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{employeeName}}\",\r\n  \"salary\": \"{{employeeSalary}}\",\r\n  \"age\": \"{{employeeAge}}\"\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "6"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": null,
							"header": [
								{
									"key": "Date",
									"value": "Sun, 10 Aug 2025 18:02:29 GMT"
								},
								{
									"key": "Server",
									"value": "Apache"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, private"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "60"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "58"
								},
								{
									"key": "Upgrade",
									"value": "h2,h2c"
								},
								{
									"key": "Connection",
									"value": "Upgrade"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								},
								{
									"key": "Content-Length",
									"value": "93"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"success\",\n    \"data\": [],\n    \"message\": \"Successfully! Record has been updated.\"\n}"
						}
					]
				}
			],
			"description": "Update an employee record"
		},
		{
			"name": "Delete employee",
			"item": [
				{
					"name": "Delete employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status is success\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.status).to.equal(\"success\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/delete/:employeeId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"delete",
								":employeeId"
							],
							"variable": [
								{
									"key": "employeeId",
									"value": "4"
								}
							]
						}
					},
					"response": [
						{
							"name": "Delete employee",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/delete/:employeeId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"delete",
										":employeeId"
									],
									"variable": [
										{
											"key": "employeeId",
											"value": "4"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": null,
							"header": [
								{
									"key": "Date",
									"value": "Sun, 10 Aug 2025 18:01:21 GMT"
								},
								{
									"key": "Server",
									"value": "Apache"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, private"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "60"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "58"
								},
								{
									"key": "Upgrade",
									"value": "h2,h2c"
								},
								{
									"key": "Connection",
									"value": "Upgrade"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								},
								{
									"key": "Content-Length",
									"value": "90"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"success\",\n    \"data\": \"4\",\n    \"message\": \"Successfully! Record has been deleted\"\n}"
						}
					]
				}
			],
			"description": "Delete an employee record"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://dummy.restapiexample.com/api/v1",
			"type": "string",
			"disabled": true
		},
		{
			"key": "employeeId",
			"value": "",
			"type": "string",
			"disabled": true
		},
		{
			"key": "employeeName",
			"value": "Hani Mohamed",
			"type": "string",
			"disabled": true
		},
		{
			"key": "employeeSalary",
			"value": "25000",
			"type": "string",
			"disabled": true
		},
		{
			"key": "employeeAge",
			"value": "24",
			"type": "string",
			"disabled": true
		}
	]
}